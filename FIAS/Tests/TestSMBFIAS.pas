unit TestSMBFIAS;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit 
  being tested.

}

interface

uses
  TestFramework, SMB.FIAS;

type
  // Test methods for class TSMBFias

  TestTSMBFias = class(TTestCase)
  strict private
    FSMBFias: TSMBFias;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestIsFiasGUIDValidGUID;
    procedure TestIsFiasGUIDInvalidGUID;
    procedure TestFiasToStrValidGUID;
    procedure TestFiasToRecAddrValidGUIDofHouse;
    procedure TestFiasToRecAddrValidGUIDofStreet;
    procedure TestFiasToRecAddrManyChangesOfHousesData;
    procedure TestFiasToRecAddrOnDate;
  end;

implementation
uses
  DBConnection, SMB.ConnectionManager, System.SysUtils;

procedure TestTSMBFias.SetUp;
begin
  FSMBFias := TSMBFias.Create(ConnectionManager['FIAS']);
end;

procedure TestTSMBFias.TearDown;
begin
  FSMBFias.Free;
  FSMBFias := nil;
end;

procedure TestTSMBFias.TestIsFiasGUIDInvalidGUID;
var
  ReturnValue : Boolean;
  FiasGUID    : string;
begin
  FiasGUID    := 'd59f0c6271b4-49a1-a715-b3e82089c19b';
  ReturnValue := FSMBFias.IsFiasGUID(FiasGUID);
  CheckFalse(ReturnValue);
end;

procedure TestTSMBFias.TestIsFiasGUIDValidGUID;
var
  ReturnValue: Boolean;
  FiasGUID: string;
begin
  FiasGUID    := 'db6c9245-05ff-4d38-b950-ff0a826b4ef1';
  ReturnValue := FSMBFias.IsFiasGUID(FiasGUID);
  CheckTrue(ReturnValue);
end;

procedure TestTSMBFias.TestFiasToRecAddrManyChangesOfHousesData;
var
  ReturnValue   : TAddressElements;
  FiasGUID      : string;
  ExpectedResult: TAddressElements;
begin
  FiasGUID       := '010d5247-9af5-4f8a-9ec4-ef4cbfb320cd';
  ReturnValue    := FSMBFias.FiasToRecAddr(FiasGUID);
  with ExpectedResult do
  begin
    PostalCode  := '445362';
    BuildNum    := '';
    HouseNum    := '10';
    ESTStatName := 'Дом';
    STRStatName := 'Не определено';
    IFNSFL      := '6382';
    IFNSUL      := '6382';
    OKATO       := '36404000005';
    OKTMO       := '36704000126';
    StrucNum    := '';
    TerrIFNSFL  := '6345';
    TerrIFNSUL  := '6345';
    NormDocID   := '';
  end;
  Check(ExpectedResult = ReturnValue);
end;

procedure TestTSMBFias.TestFiasToRecAddrOnDate;
var
  ReturnValue   : TAddressElements;
  FiasGUID      : string;
  ExpectedResult: TAddressElements;
  OnDate        : TDate;
begin
  FiasGUID        := '010d5247-9af5-4f8a-9ec4-ef4cbfb320cd';
  OnDate          := StrToDate('07.05.2014');
  ReturnValue     := FSMBFias.FiasToRecAddr(FiasGUID, OnDate);
  with ExpectedResult do
  begin
    PostalCode  := '445362';
    BuildNum    := '';
    HouseNum    := '10';
    ESTStatName := 'Дом';
    STRStatName := 'Не определено';
    IFNSFL      := '6382';
    IFNSUL      := '6382';
    OKATO       := '36404000000';
    OKTMO       := '36704000001';
    StrucNum    := '';
    TerrIFNSFL  := '6345';
    TerrIFNSUL  := '6345';
    NormDocID   := '';
  end;
  Check(ExpectedResult = ReturnValue);
end;

procedure TestTSMBFias.TestFiasToRecAddrValidGUIDofHouse;
var
  ReturnValue   : TAddressElements;
  FiasGUID      : string;
  ExpectedResult: TAddressElements;
begin
  FiasGUID       := 'db6c9245-05ff-4d38-b950-ff0a826b4ef1';
  ReturnValue    := FSMBFias.FiasToRecAddr(FiasGUID);
  with ExpectedResult do
  begin
    PostalCode  := '443067';
    BuildNum    := '';
    HouseNum    := '137';
    ESTStatName := 'Дом';
    STRStatName := 'Не определено';
    IFNSFL      := '6318';
    IFNSUL      := '6318';
    OKATO       := '36401392000';
    OKTMO       := '36701000';
    StrucNum    := '';
    TerrIFNSFL  := '';
    TerrIFNSUL  := '';
    NormDocID   := '';
  end;
  Check(ExpectedResult = ReturnValue);
end;

procedure TestTSMBFias.TestFiasToRecAddrValidGUIDofStreet;
var
  ReturnValue   : TAddressElements;
  FiasGUID      : string;
  ExpectedResult: TAddressElements;
begin
  FiasGUID       := 'd59f0c62-71b4-49a1-a715-b3e82089c19b';
  ReturnValue    := FSMBFias.FiasToRecAddr(FiasGUID);
  with ExpectedResult do
  begin
    PostalCode := '443067';
  end;
  Check(ExpectedResult = ReturnValue);
end;

procedure TestTSMBFias.TestFiasToStrValidGUID;
var
  ReturnValue: string;
  FiasGUID: string;
begin
  FiasGUID    := 'db6c9245-05ff-4d38-b950-ff0a826b4ef1';
  ReturnValue := FSMBFias.FiasToStr(FiasGUID);
  CheckEqualsString('443067, Самарская обл, Самара г, Гагарина ул, д 137', ReturnValue);
end;

initialization
  // Register any test cases with the test runner
  RegisterTest(TestTSMBFias.Suite);
end.

